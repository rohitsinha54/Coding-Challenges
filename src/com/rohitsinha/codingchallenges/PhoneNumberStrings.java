package com.rohitsinha.codingchallenges;

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Program to print all possible string for a given phone number. The digit to
 * alphabet mapping is done on basis of mapping found on typical phones.
 * Supported phone number formats as of now are: 1234567890, 123-456-7890,
 * 123.456.7890, 123 456 7890, (123) 456 7890 Also: This program keeps 0 as 0
 * rather than mapping it to + as of standard convention. It can be changed to +
 * if needed
 * 
 * @author Rohit Sinha
 */
public class PhoneNumberStrings {

	private static final String CLOSE_PROGRAM = "exit";

	// digit -> alphabet mapping 0 = {0}, 1 = {1}, 2={ABC} and so on as found on
	// keys of a typical phone. Change 0 to + here if you want + to be replace 0
	// in strings
	private static String digitToAlphaMap[][] = { { "0" }, { "1" }, { "A", "B", "C" }, { "D", "E", "F" },
			{ "G", "H", "I" }, { "J", "K", "L" }, { "M", "N", "O" }, { "P", "Q", "R", "S" }, { "T", "U", "V" },
			{ "W", "X", "Y", "Z" } };

	/**
	 * Function to print all the possible string given a phone number
	 * 
	 * @param remaining
	 *            : the remaining part of the phone number
	 * @param prefix
	 *            : the string obtained from previous call and is empty during
	 *            initial call
	 */
	private static void printAllPermsHelper(String remaining, String prefix) {
		// take out the first digit from the remaining part of the phone number
		int firstDigit = Integer.parseInt(remaining.substring(0, 1));

		if (remaining.length() == 1) {
			// base case: 1 digit left in the phone number. Print all the
			// possible strings with prefix and alphabets of this digit
			for (int i = 0; i < digitToAlphaMap[firstDigit].length; i++) {
				System.out.println((prefix + digitToAlphaMap[firstDigit][i]) + " ");
			}
		} else {
			// do recursion by calling all possible string generated by
			// appending this digit alphabets to existing prefix and the
			// remaining phone number
			for (int i = 0; i < digitToAlphaMap[firstDigit].length; i++) {
				printAllPermsHelper(remaining.substring(1), prefix + digitToAlphaMap[firstDigit][i]);
			}
		}
	}

	/**
	 * Function to print all possible strings for a given phone number. Calls
	 * printAllPermsHelper with supplied phone number and a empty string to do
	 * the job.
	 * 
	 * @param phoneNumber
	 *            : The phone number whose string has to be generated
	 */
	private static void printAllPerms(String phoneNumber) {
		// call printAllPermsHelper to print all possible strings by passing the
		// complete phone number and empty string as prefix
		printAllPermsHelper(phoneNumber, "");
	}

	/**
	 * Function to validate and reformat a correct phone number. This function
	 * will accept 1234567890, 123-456-7890, 123.456.7890, 123 456 7890, (123)
	 * 456 7890 as a valid phone number and return 1234567890 as standard
	 * formatted phone number. In case of invalid format it returns null
	 * 
	 * @param phNumber
	 *            : the phone number to be validated and formatted
	 * @return: formatted phone number if the phNumber supplied was valid
	 */
	private static String validateAndFormat(String phNumber) {
		String regexPattern = "^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$";
		// compile and match on pattern
		Pattern pattern = Pattern.compile(regexPattern);
		Matcher matcher = pattern.matcher(phNumber);
		if (matcher.find()) {
			return (matcher.group(1) + matcher.group(2) + matcher.group(3));
		} else {
			return null;
		}
	}

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		while (true) {
			System.out.println("\nWelcome: This program will generate all possible string for a given phone number.");
			System.out.println("Usage: Enter a valid phone number. To close program enter 'exit'");
			System.out.println("Supported formats: 1234567890 or 123-456-7890 or \n123.456.7890 or 123 456 7890 or (123) 456 7890");
			String phNumber = input.nextLine();
			if (phNumber.equalsIgnoreCase(CLOSE_PROGRAM)) { // if user selected to close the program
				System.out.println("Program closed by user.");
				break;
			}
			phNumber = validateAndFormat(phNumber);
			if (phNumber != null) {
				printAllPerms(phNumber); // valid phone number find all possible
											// string representation
			} else {
				System.out.println("\nNot a valid phone number. Please try again");
				continue;
			}
		}
		input.close();
	}
}